{"version":3,"file":"static/js/159.b7d5ad01.chunk.js","mappings":"gPAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAS,EAEzCC,EAAkB,SAAAF,GAAK,OAAIA,EAAMC,SAASE,SAAU,EAEpDC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,KAAM,EAI5CC,GAAyBC,EAAAA,EAAAA,IACpC,CAACR,EAH2B,SAAAC,GAAK,OAAIA,EAAMQ,MAAO,IAIlD,WAAYA,GAAY,IAArBC,EAAK,EAALA,MACD,OAAQD,EAEJC,EAAMD,QAAO,SAAAE,GAAC,OAAIA,EAAEC,KAAKC,cAAcC,SAASL,EAAOI,cAAc,IADrEH,CAEN,I,mBCbWK,EAAS,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,mBAAOC,UAAU,MAAK,WACpB,uBAAG,2BACH,kBACEA,UAAU,4BACVC,KAAK,OACLC,SAXoB,SAAAC,GACxB,IAAMC,EAAYD,EAAME,OAAOC,MAC/BC,QAAQC,IAAIJ,GACZN,GAASW,EAAAA,EAAAA,GAAeL,GAC1B,MAWF,E,6BChBaM,EAAU,SAAH,GAA8B,IAAxBC,EAAE,EAAFA,GAAIC,EAAM,EAANA,OAAQlB,EAAI,EAAJA,KAC9BI,GAAWC,EAAAA,EAAAA,MAOjB,OACE,gBAAIC,UAAU,MAAK,WACjB,kBAAMA,UAAU,2CAA0C,UACvDN,EAAK,KAAGkB,MAEX,mBACEZ,UAAU,2BACVa,QAZgB,WACpBf,GAASgB,EAAAA,EAAAA,IAAeH,IACxBI,IAAAA,OAAAA,QAAwB,uBAAD,OAAwBrB,EAAI,MACrD,EAUMO,KAAK,SAAQ,SACd,aAKP,ECtBae,EAAc,SAAH,GAAmB,IAAbC,EAAK,EAALA,MACtBjC,GAAWkC,EAAAA,EAAAA,IAAY7B,GACvB8B,GAAmB,OAAInC,GAAUoC,UAEvC,OACE,8BACGD,EAAiBE,OAAS,IACzB,4BACE,eAAIrB,UAAU,qCAAoC,SAAEiB,KACpD,eAAIjB,UAAU,oCAAmC,SAC9CmB,EAAiBG,KAAI,gBAAGX,EAAE,EAAFA,GAAIC,EAAM,EAANA,OAAQlB,EAAI,EAAJA,KAAI,OACvC,SAACgB,EAAO,CAAUC,GAAIA,EAAIjB,KAAMA,EAAMkB,OAAQA,GAAhCD,EAA0C,UAOtE,ECXe,SAASY,IACtB,IAAMzB,GAAWC,EAAAA,EAAAA,MACXb,GAAYgC,EAAAA,EAAAA,IAAYjC,GACxBD,GAAWkC,EAAAA,EAAAA,IAAYpC,GACvBM,GAAQ8B,EAAAA,EAAAA,IAAY/B,GAM1B,OAJAqC,EAAAA,EAAAA,YAAU,WACR1B,GAAS2B,EAAAA,EAAAA,MACX,GAAG,CAAC3B,KAGF,4BACE,SAAC4B,EAAA,EAAM,WACL,2BAAO,eAET,SAAC7B,EAAM,KACP,yBAAMX,GAAa,2BAClBE,IAAS,yBAAK,oCACdJ,EAASqC,OAAS,IAAMnC,IAAa,SAAC8B,EAAW,MAGxD,C","sources":["redux/contacts/selectors.js","components/Filter/Filter.jsx","components/ContactList/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFiltered = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFiltered],\n  ({ items }, filter) => {\n    return !filter\n      ? items\n      : items.filter(e => e.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);\n","import { useDispatch } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterInput = event => {\n    const filterStr = event.target.value;\n    console.log(filterStr);\n    dispatch(contactsFilter(filterStr));\n  };\n  return (\n    <label className=\"m-2\">\n      <p>Find contacts by name</p>\n      <input\n        className=\"border-2 border-green-700\"\n        type=\"text\"\n        onChange={handleFilterInput}\n      />\n    </label>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { deleteContacts } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, number, name }) => {\n  const dispatch = useDispatch();\n\n  const deleteContact = () => {\n    dispatch(deleteContacts(id));\n    Notiflix.Notify.warning(`You deleted contact ${name}. `);\n  };\n\n  return (\n    <li className=\"m-1\">\n      <span className=\"p-2 text-center text-xl text-violet-500 \">\n        {name}: {number}\n      </span>\n      <button\n        className=\"left-10 bg-cyan-500 m-1 \"\n        onClick={deleteContact}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { Contact } from './Contact';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = ({ title }) => {\n  const contacts = useSelector(selectFilteredContacts);\n  const reversedContacts = [...contacts].reverse();\n\n  return (\n    <>\n      {reversedContacts.length > 0 && (\n        <div>\n          <h2 className=\"text-xl text-center font-semibold \">{title}</h2>\n          <ul className=\"flex flex-col  p-0 items-baseline\">\n            {reversedContacts.map(({ id, number, name }) => (\n              <Contact key={id} id={id} name={name} number={number} />\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\nContactList.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Contact</title>\n      </Helmet>\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {error && <div>Sorry, something went wrong....</div>}\n      {contacts.length > 0 && !isLoading && <ContactList />}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","items","e","name","toLowerCase","includes","Filter","dispatch","useDispatch","className","type","onChange","event","filterStr","target","value","console","log","contactsFilter","Contact","id","number","onClick","deleteContacts","Notiflix","ContactList","title","useSelector","reversedContacts","reverse","length","map","ContactsPage","useEffect","fetchContacts","Helmet"],"sourceRoot":""}